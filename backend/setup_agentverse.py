"""
Setup script for Agentverse deployment.

This script helps you:
1. Configure mailbox agents
2. Test Agentverse connection
3. Generate deployment configuration

Usage:
    python setup_agentverse.py
"""

import os
import sys
from pathlib import Path

def print_header(text):
    """Print formatted header"""
    print("\n" + "=" * 70)
    print(f"  {text}")
    print("=" * 70 + "\n")


def check_prerequisites():
    """Check if prerequisites are met"""
    print_header("Checking Prerequisites")

    # Check uagents
    try:
        import uagents
        print(f"✓ uagents {uagents.__version__} installed")
    except ImportError:
        print("✗ uagents not installed")
        print("  Fix: pip install uagents==0.11.0")
        return False

    # Check pydantic version
    try:
        import pydantic
        version = pydantic.VERSION
        if version.startswith("2."):
            print(f"⚠ Pydantic {version} detected (need 1.x)")
            print("  Fix: pip install pydantic==1.10.9")
            return False
        print(f"✓ pydantic {version} installed")
    except ImportError:
        print("✗ pydantic not installed")
        return False

    print("\n✓ All prerequisites met!")
    return True


def get_mailbox_keys():
    """Interactive setup to get mailbox keys"""
    print_header("Agentverse Mailbox Setup")

    print("Follow these steps to get mailbox keys:\n")
    print("1. Go to https://agentverse.ai")
    print("2. Login or create account")
    print("3. Navigate to 'Mailboxes' section")
    print("4. Create a mailbox for each agent")
    print("5. Copy the mailbox key (looks like: 'a1b2c3...')\n")

    agents = [
        "coordinator",
        "eligibility",
        "pattern",
        "discovery",
        "matching",
        "site",
        "prediction"
    ]

    mailboxes = {}

    print("Enter mailbox keys for each agent (or press Enter to skip):\n")

    for agent in agents:
        key = input(f"{agent.capitalize()} Agent mailbox key: ").strip()
        if key:
            mailboxes[agent] = key
            print(f"  ✓ Saved {agent} mailbox key")
        else:
            print(f"  ⊘ Skipped {agent}")

    return mailboxes


def create_env_file(mailboxes):
    """Create .env file with mailbox keys"""
    print_header("Creating Environment File")

    env_path = Path(__file__).parent / ".env.agentverse"

    with open(env_path, "w") as f:
        f.write("# Agentverse Mailbox Keys\n")
        f.write("# Generated by setup_agentverse.py\n\n")

        for agent, key in mailboxes.items():
            env_var = f"{agent.upper()}_MAILBOX"
            f.write(f"{env_var}={key}\n")

        f.write("\n# Enable mailbox mode\n")
        f.write("USE_AGENTVERSE_MAILBOXES=true\n")

    print(f"✓ Created {env_path}")
    print(f"\nTo use these mailboxes, run:")
    print(f"  source {env_path}  # Linux/Mac")
    print(f"  set -a; source {env_path}; set +a  # Alternative\n")


def create_mailbox_runner():
    """Create a runner script for mailbox agents"""
    print_header("Creating Mailbox Runner")

    runner_path = Path(__file__).parent / "run_agents_mailbox.py"

    runner_code = '''"""
Run all agents with Agentverse mailboxes.

Prerequisites:
1. Set up mailbox keys: python setup_agentverse.py
2. Load environment: source .env.agentverse
3. Run: python run_agents_mailbox.py
"""

from uagents import Bureau, Agent
import logging
import sys
import os

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def create_mailbox_agent(config, mailbox_env_var):
    """Create agent with Agentverse mailbox"""
    from agents.config import AgentConfig

    mailbox_key = os.getenv(mailbox_env_var)

    if not mailbox_key:
        logger.warning(f"No mailbox key for {mailbox_env_var} - using local only")
        return Agent(**config)

    # Add mailbox to config
    config_with_mailbox = config.copy()
    config_with_mailbox["mailbox"] = f"{mailbox_key}@https://agentverse.ai"

    logger.info(f"Creating {config['name']} with Agentverse mailbox")
    return Agent(**config_with_mailbox)


def main():
    logger.info("=" * 70)
    logger.info("STARTING AGENTS WITH AGENTVERSE MAILBOXES")
    logger.info("=" * 70)

    # Check if mailbox keys are set
    use_mailboxes = os.getenv("USE_AGENTVERSE_MAILBOXES") == "true"

    if not use_mailboxes:
        logger.warning("USE_AGENTVERSE_MAILBOXES not set - using local mode")
        logger.info("To enable mailboxes: source .env.agentverse")

    # Import configurations
    from agents.config import AgentConfig

    # Create agents with mailboxes
    try:
        # Import agent modules (to register handlers)
        import agents.coordinator_agent as coordinator_module
        import agents.eligibility_agent as eligibility_module
        import agents.pattern_agent as pattern_module
        import agents.discovery_agent as discovery_module
        import agents.matching_agent as matching_module
        import agents.site_agent as site_module
        import agents.prediction_agent as prediction_module

        # Get agent instances
        agents = {
            "coordinator": coordinator_module.agent,
            "eligibility": eligibility_module.agent,
            "pattern": pattern_module.agent,
            "discovery": discovery_module.agent,
            "matching": matching_module.agent,
            "site": site_module.agent,
            "prediction": prediction_module.agent
        }

        # Create Bureau
        bureau = Bureau()

        # Add all agents
        for name, agent in agents.items():
            bureau.add(agent)
            logger.info(f"✓ Added {name} agent: {agent.address}")

        logger.info("")
        logger.info("All agents registered!")
        logger.info("Starting agent network...")
        logger.info("=" * 70)

        # Run
        bureau.run()

    except KeyboardInterrupt:
        logger.info("\\nShutting down agent network...")
        sys.exit(0)
    except Exception as e:
        logger.error(f"Error starting agents: {e}", exc_info=True)
        sys.exit(1)


if __name__ == "__main__":
    main()
'''

    with open(runner_path, "w") as f:
        f.write(runner_code)

    print(f"✓ Created {runner_path}")
    print(f"\nTo run agents with mailboxes:")
    print(f"  python run_agents_mailbox.py\n")


def test_connection():
    """Test connection to Agentverse"""
    print_header("Testing Agentverse Connection")

    try:
        import requests

        print("Testing connection to Agentverse API...")
        response = requests.get("https://agentverse.ai", timeout=5)

        if response.status_code == 200:
            print("✓ Successfully connected to Agentverse")
            return True
        else:
            print(f"⚠ Unexpected response: {response.status_code}")
            return False

    except requests.exceptions.RequestException as e:
        print(f"✗ Connection failed: {e}")
        print("  Check your internet connection")
        return False


def print_next_steps(has_mailboxes):
    """Print next steps"""
    print_header("Next Steps")

    if has_mailboxes:
        print("✓ Mailbox setup complete!\n")
        print("To run your agents with Agentverse:")
        print("  1. source .env.agentverse")
        print("  2. python run_agents_mailbox.py")
        print("")
        print("Your agents will have public Agentverse addresses!")
        print("They'll be accessible from anywhere in the world.")
    else:
        print("To complete Agentverse setup:\n")
        print("1. Go to https://agentverse.ai")
        print("2. Create mailboxes for your agents")
        print("3. Run this script again: python setup_agentverse.py")
        print("4. Enter your mailbox keys")
        print("")
        print("For now, you can run agents locally:")
        print("  python run_agents.py")

    print("\n" + "=" * 70)
    print("Resources:")
    print("  • Agentverse Docs: https://docs.fetch.ai/guides/agentverse/")
    print("  • Discord Support: https://discord.gg/fetchai")
    print("  • Full Guide: See AGENTVERSE_DEPLOYMENT.md")
    print("=" * 70 + "\n")


def main():
    """Main setup flow"""
    print("\n")
    print("╔═══════════════════════════════════════════════════════════════════╗")
    print("║                                                                   ║")
    print("║          TRIALMATCH AI - AGENTVERSE SETUP WIZARD                  ║")
    print("║                                                                   ║")
    print("╚═══════════════════════════════════════════════════════════════════╝")
    print("\n")

    # Check prerequisites
    if not check_prerequisites():
        print("\n✗ Prerequisites not met. Please fix and try again.")
        sys.exit(1)

    # Test connection
    if not test_connection():
        print("\n⚠ Could not connect to Agentverse")
        print("  You can continue, but deployment may fail")
        response = input("\nContinue anyway? (y/n): ").lower()
        if response != 'y':
            sys.exit(0)

    # Get mailbox keys
    print("\nDo you have Agentverse mailbox keys ready?")
    print("  y - Yes, I have keys")
    print("  n - No, I'll set up later")
    print("  h - Show me how to get keys")

    choice = input("\nChoice (y/n/h): ").lower().strip()

    if choice == 'h':
        print_header("How to Get Mailbox Keys")
        print("1. Open browser: https://agentverse.ai")
        print("2. Sign up or login")
        print("3. Click 'Mailboxes' in sidebar")
        print("4. Click 'Create Mailbox'")
        print("5. Name: 'coordinator_agent' (or any name)")
        print("6. Copy the mailbox key shown")
        print("7. Repeat for all 7 agents\n")
        print("Then run this script again!\n")
        sys.exit(0)

    elif choice == 'y':
        mailboxes = get_mailbox_keys()

        if mailboxes:
            create_env_file(mailboxes)
            create_mailbox_runner()
            print_next_steps(True)
        else:
            print("\n⚠ No mailbox keys entered")
            print_next_steps(False)

    else:
        print("\nNo problem! You can set up mailboxes later.")
        create_mailbox_runner()
        print_next_steps(False)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n✗ Setup cancelled by user")
        sys.exit(0)
    except Exception as e:
        print(f"\n✗ Error during setup: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
